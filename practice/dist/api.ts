"import { BaseService } from '../../services/base.service';\nimport { NzMessageService } from 'ng-zorro-antd';\nimport { NzIconService } from 'ng-zorro-antd/icon';\nimport { Redmine } from '../../../assets/redmine';\nimport { Fxiaoke } from '../../../assets/fxiaoke';\nimport { LeftMenuService } from '../../services/left-menu.service';\nimport { forkJoin, fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { AsyncService } from '@app/utils/async.service';\n/**\n * 主页面\n */\n\nclass DashboardComponent {\n  isPermission: boolean = localStorage.getItem('rid') == '2';\n  rid = localStorage.getItem('rid') !== '9';\n  username = localStorage.getItem('name');\n  status = true;\n  isCollapsed = false;\n  menuList = [];\n  topMenuList = [];\n  leftMenuSelectIndex: number;\n  topMenuSelectIndex: number;\n  isCurrentTopMenu: boolean = true;\n\n  constructor(private _iconService: NzIconService, private baseService: BaseService, private router: Router, private editResourceService: EditResourceService, private message: NzMessageService, private leftMenuService: LeftMenuService, private asyncService: AsyncService) {\n    this._iconService.addIconLiteral('ng-zorro:Redmine', Redmine.logo);\n\n    this._iconService.addIconLiteral('ng-zorro:Fxiaoke', Fxiaoke.logo);\n  }\n\n  ngOnInit() {\n    setTimeout(() => this.isCollapsed = window.innerWidth < 1400);\n    this.isPermission = localStorage.getItem('rid') == '2';\n    this.baseService.httpSubject.subscribe({\n      next: val => {\n        this.status = val;\n      }\n    });\n    this.leftMenuService.getMenuDataList('topMenu').subscribe(res => {\n      this.topMenuList = res;\n      const queryAry = [];\n      res.forEach(element => {\n        queryAry.push(this.leftMenuService.getMenuDataList(element.type));\n      });\n      forkJoin(queryAry).subscribe(() => this.setMenuSelected());\n    });\n    this.setGlobalResizeSubscription();\n  }\n\n  setGlobalResizeSubscription() {\n    this.asyncService.setSubscriber('windowResize');\n    fromEvent(window, 'resize').pipe(debounceTime(this.asyncService.resizeDebounceTime)).subscribe(() => {\n      this.asyncService.subjectObj['windowResize'].next();\n    });\n  }\n  /**\n     * 登出\n     */\n\n\n  signOut(name: string) {\n    this.editResourceService.LoginOut().subscribe(res => {\n      if (res['result'] == 200) {\n        localStorage.clear();\n        this.isPermission = false;\n        this.message.success('登出成功！', {\n          nzDuration: 5000\n        });\n        this.router.navigate(['auth']);\n      }\n    });\n  }\n  /**\n   * 获取菜单\n   */\n\n\n  getMenu(type: string) {\n    if (this.topMenuSelectIndex === undefined) return;\n    this.isCurrentTopMenu = type === this.topMenuList[this.topMenuSelectIndex]['type'];\n    this.leftMenuService.getMenuDataList(type).subscribe(res => {\n      this.menuList = res;\n    });\n  }\n\n  setMenuSelected() {\n    const location = this.router.url.split(';')[0]; // 遍历找出对应菜单\n\n    for (const k in this.leftMenuService.menu) {\n      if (this.leftMenuService.menu.hasOwnProperty(k)) {\n        if (k === 'topMenu') continue;\n        const menuList = this.leftMenuService.menu[k].filter((item, index) => {\n          const i = item.list.findIndex(menuItem => {\n            return menuItem.link === location;\n          });\n\n          if (i > -1) {\n            this.leftMenuSelectIndex = index;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (menuList.length) {\n          this.topMenuSelectIndex = Object.values(this.leftMenuService.menu['topMenu']).findIndex(item => item['type'] === k);\n          this.menuList = this.leftMenuService.menu[k];\n          break;\n        }\n      }\n    } // 处于无对应菜单的路由时，设置默认状态\n\n\n    if (this.topMenuSelectIndex === undefined) {\n      this.topMenuSelectIndex = 0;\n      this.leftMenuSelectIndex = 0;\n      const defaultType = this.leftMenuService.menu['topMenu'][this.topMenuSelectIndex]['type'];\n      this.menuList = this.leftMenuService.menu[defaultType];\n    }\n  }\n\n}"